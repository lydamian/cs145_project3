
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000466  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001526  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3c  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cc8  00000000  00000000  000025ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000354  00000000  00000000  00003284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000507  00000000  00000000  000035d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014d9  00000000  00000000  00003adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  8a:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <avr_wait>:
	WDTCR = 15;
}

void
avr_wait(unsigned short msec)
{
  92:	9c 01       	movw	r18, r24
	TCCR0 = 3;
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  98:	83 e8       	ldi	r24, 0x83	; 131

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  9a:	08 c0       	rjmp	.+16     	; 0xac <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  9c:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  9e:	98 b7       	in	r25, 0x38	; 56
  a0:	91 60       	ori	r25, 0x01	; 1
  a2:	98 bf       	out	0x38, r25	; 56
		WDR();
  a4:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  a6:	08 b6       	in	r0, 0x38	; 56
  a8:	00 fe       	sbrs	r0, 0
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <avr_wait+0x14>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	31 09       	sbc	r19, r1
  b0:	a8 f7       	brcc	.-22     	; 0x9c <avr_wait+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  b2:	13 be       	out	0x33, r1	; 51
  b4:	08 95       	ret

000000b6 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  b6:	66 23       	and	r22, r22
  b8:	11 f0       	breq	.+4      	; 0xbe <output+0x8>
  ba:	c0 9a       	sbi	0x18, 0	; 24
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <output+0xa>
  be:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
  c0:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN 2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
  c2:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  c8:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  ca:	00 00       	nop
  NOP();
  cc:	00 00       	nop
  NOP();
  ce:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
  d0:	c2 98       	cbi	0x18, 2	; 24
  d2:	08 95       	ret

000000d4 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  d4:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
  d6:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  d8:	11 ba       	out	0x11, r1	; 17
  return PIND;
  da:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  dc:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  de:	00 00       	nop
  NOP();
  e0:	00 00       	nop
  NOP();
  e2:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  e4:	11 ba       	out	0x11, r1	; 17
  return PIND;
  e6:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
  e8:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
  ea:	99 23       	and	r25, r25
  ec:	9c f3       	brlt	.-26     	; 0xd4 <write>
  output(c, rs);
  ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <output>
  f2:	08 95       	ret

000000f4 <lcd_init>:
}

void
lcd_init(void)
{
  SET_BIT(DDR, RS_PIN);
  f4:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
  f6:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
  f8:	ba 9a       	sbi	0x17, 2	; 23
  avr_wait(16);
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
  output(0x30, 0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	0e 94 5b 00 	call	0xb6	; 0xb6 <output>
  avr_wait(5);
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
  output(0x30, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	0e 94 5b 00 	call	0xb6	; 0xb6 <output>
  avr_wait(1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
  write(0x3c, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8c e3       	ldi	r24, 0x3C	; 60
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
  write(0x0c, 0);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
  write(0x06, 0);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
  write(0x01, 0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 142:	08 95       	ret

00000144 <lcd_clr>:
}

void
lcd_clr(void)
{
  write(0x01, 0);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 14c:	08 95       	ret

0000014e <setup>:
		avr_wait(freq);
	}
	//return;
}

void play_song(){
 14e:	d0 9a       	sbi	0x1a, 0	; 26
 150:	d8 98       	cbi	0x1b, 0	; 27
 152:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>
 156:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
 15a:	d0 9a       	sbi	0x1a, 0	; 26
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret

00000162 <play_note>:
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	8c 01       	movw	r16, r24
 174:	07 2e       	mov	r0, r23
 176:	00 0c       	add	r0, r0
 178:	88 0b       	sbc	r24, r24
 17a:	99 0b       	sbc	r25, r25
 17c:	0e 94 a5 01 	call	0x34a	; 0x34a <__floatsisf>
 180:	6b 01       	movw	r12, r22
 182:	7c 01       	movw	r14, r24
 184:	b8 01       	movw	r22, r16
 186:	01 2e       	mov	r0, r17
 188:	00 0c       	add	r0, r0
 18a:	88 0b       	sbc	r24, r24
 18c:	99 0b       	sbc	r25, r25
 18e:	0e 94 a5 01 	call	0x34a	; 0x34a <__floatsisf>
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	9f e3       	ldi	r25, 0x3F	; 63
 19e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divsf3>
 1a2:	9b 01       	movw	r18, r22
 1a4:	ac 01       	movw	r20, r24
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__divsf3>
 1ae:	0e 94 6d 01 	call	0x2da	; 0x2da <__fixsfsi>
 1b2:	eb 01       	movw	r28, r22
 1b4:	1c 16       	cp	r1, r28
 1b6:	1d 06       	cpc	r1, r29
 1b8:	64 f4       	brge	.+24     	; 0x1d2 <play_note+0x70>
 1ba:	d8 9a       	sbi	0x1b, 0	; 27
 1bc:	c8 01       	movw	r24, r16
 1be:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
 1c2:	d8 98       	cbi	0x1b, 0	; 27
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
 1ca:	21 96       	adiw	r28, 0x01	; 1
 1cc:	1c 16       	cp	r1, r28
 1ce:	1d 06       	cpc	r1, r29
 1d0:	a4 f3       	brlt	.-24     	; 0x1ba <play_note+0x58>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	08 95       	ret

000001e4 <main>:
	struct tm myTm;
	char seconds[3];
	int k;
	
	// setting up
	setup();
 1e4:	0e 94 a7 00 	call	0x14e	; 0x14e <setup>
		avr_wait(100);
		keeptime(&myTm); // keeps 
		display_time(&myTm);
		set_time(&myTm);
		*/
		play_note(440,5);
 1e8:	65 e0       	ldi	r22, 0x05	; 5
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	88 eb       	ldi	r24, 0xB8	; 184
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 b1 00 	call	0x162	; 0x162 <play_note>
 1f4:	f9 cf       	rjmp	.-14     	; 0x1e8 <main+0x4>

000001f6 <__divsf3>:
 1f6:	0e 94 0f 01 	call	0x21e	; 0x21e <__divsf3x>
 1fa:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__fp_round>
 1fe:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__fp_pscB>
 202:	58 f0       	brcs	.+22     	; 0x21a <__divsf3+0x24>
 204:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fp_pscA>
 208:	40 f0       	brcs	.+16     	; 0x21a <__divsf3+0x24>
 20a:	29 f4       	brne	.+10     	; 0x216 <__divsf3+0x20>
 20c:	5f 3f       	cpi	r21, 0xFF	; 255
 20e:	29 f0       	breq	.+10     	; 0x21a <__divsf3+0x24>
 210:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_inf>
 214:	51 11       	cpse	r21, r1
 216:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_szero>
 21a:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_nan>

0000021e <__divsf3x>:
 21e:	0e 94 08 02 	call	0x410	; 0x410 <__fp_split3>
 222:	68 f3       	brcs	.-38     	; 0x1fe <__divsf3+0x8>

00000224 <__divsf3_pse>:
 224:	99 23       	and	r25, r25
 226:	b1 f3       	breq	.-20     	; 0x214 <__divsf3+0x1e>
 228:	55 23       	and	r21, r21
 22a:	91 f3       	breq	.-28     	; 0x210 <__divsf3+0x1a>
 22c:	95 1b       	sub	r25, r21
 22e:	55 0b       	sbc	r21, r21
 230:	bb 27       	eor	r27, r27
 232:	aa 27       	eor	r26, r26
 234:	62 17       	cp	r22, r18
 236:	73 07       	cpc	r23, r19
 238:	84 07       	cpc	r24, r20
 23a:	38 f0       	brcs	.+14     	; 0x24a <__divsf3_pse+0x26>
 23c:	9f 5f       	subi	r25, 0xFF	; 255
 23e:	5f 4f       	sbci	r21, 0xFF	; 255
 240:	22 0f       	add	r18, r18
 242:	33 1f       	adc	r19, r19
 244:	44 1f       	adc	r20, r20
 246:	aa 1f       	adc	r26, r26
 248:	a9 f3       	breq	.-22     	; 0x234 <__divsf3_pse+0x10>
 24a:	35 d0       	rcall	.+106    	; 0x2b6 <__divsf3_pse+0x92>
 24c:	0e 2e       	mov	r0, r30
 24e:	3a f0       	brmi	.+14     	; 0x25e <__divsf3_pse+0x3a>
 250:	e0 e8       	ldi	r30, 0x80	; 128
 252:	32 d0       	rcall	.+100    	; 0x2b8 <__divsf3_pse+0x94>
 254:	91 50       	subi	r25, 0x01	; 1
 256:	50 40       	sbci	r21, 0x00	; 0
 258:	e6 95       	lsr	r30
 25a:	00 1c       	adc	r0, r0
 25c:	ca f7       	brpl	.-14     	; 0x250 <__divsf3_pse+0x2c>
 25e:	2b d0       	rcall	.+86     	; 0x2b6 <__divsf3_pse+0x92>
 260:	fe 2f       	mov	r31, r30
 262:	29 d0       	rcall	.+82     	; 0x2b6 <__divsf3_pse+0x92>
 264:	66 0f       	add	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	88 1f       	adc	r24, r24
 26a:	bb 1f       	adc	r27, r27
 26c:	26 17       	cp	r18, r22
 26e:	37 07       	cpc	r19, r23
 270:	48 07       	cpc	r20, r24
 272:	ab 07       	cpc	r26, r27
 274:	b0 e8       	ldi	r27, 0x80	; 128
 276:	09 f0       	breq	.+2      	; 0x27a <__divsf3_pse+0x56>
 278:	bb 0b       	sbc	r27, r27
 27a:	80 2d       	mov	r24, r0
 27c:	bf 01       	movw	r22, r30
 27e:	ff 27       	eor	r31, r31
 280:	93 58       	subi	r25, 0x83	; 131
 282:	5f 4f       	sbci	r21, 0xFF	; 255
 284:	3a f0       	brmi	.+14     	; 0x294 <__divsf3_pse+0x70>
 286:	9e 3f       	cpi	r25, 0xFE	; 254
 288:	51 05       	cpc	r21, r1
 28a:	78 f0       	brcs	.+30     	; 0x2aa <__divsf3_pse+0x86>
 28c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_inf>
 290:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_szero>
 294:	5f 3f       	cpi	r21, 0xFF	; 255
 296:	e4 f3       	brlt	.-8      	; 0x290 <__divsf3_pse+0x6c>
 298:	98 3e       	cpi	r25, 0xE8	; 232
 29a:	d4 f3       	brlt	.-12     	; 0x290 <__divsf3_pse+0x6c>
 29c:	86 95       	lsr	r24
 29e:	77 95       	ror	r23
 2a0:	67 95       	ror	r22
 2a2:	b7 95       	ror	r27
 2a4:	f7 95       	ror	r31
 2a6:	9f 5f       	subi	r25, 0xFF	; 255
 2a8:	c9 f7       	brne	.-14     	; 0x29c <__divsf3_pse+0x78>
 2aa:	88 0f       	add	r24, r24
 2ac:	91 1d       	adc	r25, r1
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	97 f9       	bld	r25, 7
 2b4:	08 95       	ret
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	66 0f       	add	r22, r22
 2ba:	77 1f       	adc	r23, r23
 2bc:	88 1f       	adc	r24, r24
 2be:	bb 1f       	adc	r27, r27
 2c0:	62 17       	cp	r22, r18
 2c2:	73 07       	cpc	r23, r19
 2c4:	84 07       	cpc	r24, r20
 2c6:	ba 07       	cpc	r27, r26
 2c8:	20 f0       	brcs	.+8      	; 0x2d2 <__divsf3_pse+0xae>
 2ca:	62 1b       	sub	r22, r18
 2cc:	73 0b       	sbc	r23, r19
 2ce:	84 0b       	sbc	r24, r20
 2d0:	ba 0b       	sbc	r27, r26
 2d2:	ee 1f       	adc	r30, r30
 2d4:	88 f7       	brcc	.-30     	; 0x2b8 <__divsf3_pse+0x94>
 2d6:	e0 95       	com	r30
 2d8:	08 95       	ret

000002da <__fixsfsi>:
 2da:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fixunssfsi>
 2de:	68 94       	set
 2e0:	b1 11       	cpse	r27, r1
 2e2:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_szero>
 2e6:	08 95       	ret

000002e8 <__fixunssfsi>:
 2e8:	0e 94 10 02 	call	0x420	; 0x420 <__fp_splitA>
 2ec:	88 f0       	brcs	.+34     	; 0x310 <__fixunssfsi+0x28>
 2ee:	9f 57       	subi	r25, 0x7F	; 127
 2f0:	98 f0       	brcs	.+38     	; 0x318 <__fixunssfsi+0x30>
 2f2:	b9 2f       	mov	r27, r25
 2f4:	99 27       	eor	r25, r25
 2f6:	b7 51       	subi	r27, 0x17	; 23
 2f8:	b0 f0       	brcs	.+44     	; 0x326 <__fixunssfsi+0x3e>
 2fa:	e1 f0       	breq	.+56     	; 0x334 <__fixunssfsi+0x4c>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	1a f0       	brmi	.+6      	; 0x30c <__fixunssfsi+0x24>
 306:	ba 95       	dec	r27
 308:	c9 f7       	brne	.-14     	; 0x2fc <__fixunssfsi+0x14>
 30a:	14 c0       	rjmp	.+40     	; 0x334 <__fixunssfsi+0x4c>
 30c:	b1 30       	cpi	r27, 0x01	; 1
 30e:	91 f0       	breq	.+36     	; 0x334 <__fixunssfsi+0x4c>
 310:	0e 94 2a 02 	call	0x454	; 0x454 <__fp_zero>
 314:	b1 e0       	ldi	r27, 0x01	; 1
 316:	08 95       	ret
 318:	0c 94 2a 02 	jmp	0x454	; 0x454 <__fp_zero>
 31c:	67 2f       	mov	r22, r23
 31e:	78 2f       	mov	r23, r24
 320:	88 27       	eor	r24, r24
 322:	b8 5f       	subi	r27, 0xF8	; 248
 324:	39 f0       	breq	.+14     	; 0x334 <__fixunssfsi+0x4c>
 326:	b9 3f       	cpi	r27, 0xF9	; 249
 328:	cc f3       	brlt	.-14     	; 0x31c <__fixunssfsi+0x34>
 32a:	86 95       	lsr	r24
 32c:	77 95       	ror	r23
 32e:	67 95       	ror	r22
 330:	b3 95       	inc	r27
 332:	d9 f7       	brne	.-10     	; 0x32a <__fixunssfsi+0x42>
 334:	3e f4       	brtc	.+14     	; 0x344 <__fixunssfsi+0x5c>
 336:	90 95       	com	r25
 338:	80 95       	com	r24
 33a:	70 95       	com	r23
 33c:	61 95       	neg	r22
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	08 95       	ret

00000346 <__floatunsisf>:
 346:	e8 94       	clt
 348:	09 c0       	rjmp	.+18     	; 0x35c <__floatsisf+0x12>

0000034a <__floatsisf>:
 34a:	97 fb       	bst	r25, 7
 34c:	3e f4       	brtc	.+14     	; 0x35c <__floatsisf+0x12>
 34e:	90 95       	com	r25
 350:	80 95       	com	r24
 352:	70 95       	com	r23
 354:	61 95       	neg	r22
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	8f 4f       	sbci	r24, 0xFF	; 255
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	99 23       	and	r25, r25
 35e:	a9 f0       	breq	.+42     	; 0x38a <__floatsisf+0x40>
 360:	f9 2f       	mov	r31, r25
 362:	96 e9       	ldi	r25, 0x96	; 150
 364:	bb 27       	eor	r27, r27
 366:	93 95       	inc	r25
 368:	f6 95       	lsr	r31
 36a:	87 95       	ror	r24
 36c:	77 95       	ror	r23
 36e:	67 95       	ror	r22
 370:	b7 95       	ror	r27
 372:	f1 11       	cpse	r31, r1
 374:	f8 cf       	rjmp	.-16     	; 0x366 <__floatsisf+0x1c>
 376:	fa f4       	brpl	.+62     	; 0x3b6 <__floatsisf+0x6c>
 378:	bb 0f       	add	r27, r27
 37a:	11 f4       	brne	.+4      	; 0x380 <__floatsisf+0x36>
 37c:	60 ff       	sbrs	r22, 0
 37e:	1b c0       	rjmp	.+54     	; 0x3b6 <__floatsisf+0x6c>
 380:	6f 5f       	subi	r22, 0xFF	; 255
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	8f 4f       	sbci	r24, 0xFF	; 255
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	16 c0       	rjmp	.+44     	; 0x3b6 <__floatsisf+0x6c>
 38a:	88 23       	and	r24, r24
 38c:	11 f0       	breq	.+4      	; 0x392 <__floatsisf+0x48>
 38e:	96 e9       	ldi	r25, 0x96	; 150
 390:	11 c0       	rjmp	.+34     	; 0x3b4 <__floatsisf+0x6a>
 392:	77 23       	and	r23, r23
 394:	21 f0       	breq	.+8      	; 0x39e <__floatsisf+0x54>
 396:	9e e8       	ldi	r25, 0x8E	; 142
 398:	87 2f       	mov	r24, r23
 39a:	76 2f       	mov	r23, r22
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <__floatsisf+0x5e>
 39e:	66 23       	and	r22, r22
 3a0:	71 f0       	breq	.+28     	; 0x3be <__floatsisf+0x74>
 3a2:	96 e8       	ldi	r25, 0x86	; 134
 3a4:	86 2f       	mov	r24, r22
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	2a f0       	brmi	.+10     	; 0x3b6 <__floatsisf+0x6c>
 3ac:	9a 95       	dec	r25
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	88 1f       	adc	r24, r24
 3b4:	da f7       	brpl	.-10     	; 0x3ac <__floatsisf+0x62>
 3b6:	88 0f       	add	r24, r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	97 f9       	bld	r25, 7
 3be:	08 95       	ret

000003c0 <__fp_inf>:
 3c0:	97 f9       	bld	r25, 7
 3c2:	9f 67       	ori	r25, 0x7F	; 127
 3c4:	80 e8       	ldi	r24, 0x80	; 128
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	08 95       	ret

000003cc <__fp_nan>:
 3cc:	9f ef       	ldi	r25, 0xFF	; 255
 3ce:	80 ec       	ldi	r24, 0xC0	; 192
 3d0:	08 95       	ret

000003d2 <__fp_pscA>:
 3d2:	00 24       	eor	r0, r0
 3d4:	0a 94       	dec	r0
 3d6:	16 16       	cp	r1, r22
 3d8:	17 06       	cpc	r1, r23
 3da:	18 06       	cpc	r1, r24
 3dc:	09 06       	cpc	r0, r25
 3de:	08 95       	ret

000003e0 <__fp_pscB>:
 3e0:	00 24       	eor	r0, r0
 3e2:	0a 94       	dec	r0
 3e4:	12 16       	cp	r1, r18
 3e6:	13 06       	cpc	r1, r19
 3e8:	14 06       	cpc	r1, r20
 3ea:	05 06       	cpc	r0, r21
 3ec:	08 95       	ret

000003ee <__fp_round>:
 3ee:	09 2e       	mov	r0, r25
 3f0:	03 94       	inc	r0
 3f2:	00 0c       	add	r0, r0
 3f4:	11 f4       	brne	.+4      	; 0x3fa <__fp_round+0xc>
 3f6:	88 23       	and	r24, r24
 3f8:	52 f0       	brmi	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fa:	bb 0f       	add	r27, r27
 3fc:	40 f4       	brcc	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fe:	bf 2b       	or	r27, r31
 400:	11 f4       	brne	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	60 ff       	sbrs	r22, 0
 404:	04 c0       	rjmp	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	6f 5f       	subi	r22, 0xFF	; 255
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__fp_split3>:
 410:	57 fd       	sbrc	r21, 7
 412:	90 58       	subi	r25, 0x80	; 128
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	59 f0       	breq	.+22     	; 0x430 <__fp_splitA+0x10>
 41a:	5f 3f       	cpi	r21, 0xFF	; 255
 41c:	71 f0       	breq	.+28     	; 0x43a <__fp_splitA+0x1a>
 41e:	47 95       	ror	r20

00000420 <__fp_splitA>:
 420:	88 0f       	add	r24, r24
 422:	97 fb       	bst	r25, 7
 424:	99 1f       	adc	r25, r25
 426:	61 f0       	breq	.+24     	; 0x440 <__fp_splitA+0x20>
 428:	9f 3f       	cpi	r25, 0xFF	; 255
 42a:	79 f0       	breq	.+30     	; 0x44a <__fp_splitA+0x2a>
 42c:	87 95       	ror	r24
 42e:	08 95       	ret
 430:	12 16       	cp	r1, r18
 432:	13 06       	cpc	r1, r19
 434:	14 06       	cpc	r1, r20
 436:	55 1f       	adc	r21, r21
 438:	f2 cf       	rjmp	.-28     	; 0x41e <__fp_split3+0xe>
 43a:	46 95       	lsr	r20
 43c:	f1 df       	rcall	.-30     	; 0x420 <__fp_splitA>
 43e:	08 c0       	rjmp	.+16     	; 0x450 <__fp_splitA+0x30>
 440:	16 16       	cp	r1, r22
 442:	17 06       	cpc	r1, r23
 444:	18 06       	cpc	r1, r24
 446:	99 1f       	adc	r25, r25
 448:	f1 cf       	rjmp	.-30     	; 0x42c <__fp_splitA+0xc>
 44a:	86 95       	lsr	r24
 44c:	71 05       	cpc	r23, r1
 44e:	61 05       	cpc	r22, r1
 450:	08 94       	sec
 452:	08 95       	ret

00000454 <__fp_zero>:
 454:	e8 94       	clt

00000456 <__fp_szero>:
 456:	bb 27       	eor	r27, r27
 458:	66 27       	eor	r22, r22
 45a:	77 27       	eor	r23, r23
 45c:	cb 01       	movw	r24, r22
 45e:	97 f9       	bld	r25, 7
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
