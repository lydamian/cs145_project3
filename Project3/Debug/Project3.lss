
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000568  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001593  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0c  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cc6  00000000  00000000  000026f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000032c  00000000  00000000  000033c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050a  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013e2  00000000  00000000  00003bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  8a:	0c 94 b2 02 	jmp	0x564	; 0x564 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <avr_wait>:
	WDTCR = 15;
}

void
avr_wait(unsigned short msec)
{
  92:	9c 01       	movw	r18, r24
	TCCR0 = 3;
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  98:	83 e8       	ldi	r24, 0x83	; 131

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  9a:	08 c0       	rjmp	.+16     	; 0xac <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
  9c:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  9e:	98 b7       	in	r25, 0x38	; 56
  a0:	91 60       	ori	r25, 0x01	; 1
  a2:	98 bf       	out	0x38, r25	; 56
		WDR();
  a4:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
  a6:	08 b6       	in	r0, 0x38	; 56
  a8:	00 fe       	sbrs	r0, 0
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <avr_wait+0x14>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	31 09       	sbc	r19, r1
  b0:	a8 f7       	brcc	.-22     	; 0x9c <avr_wait+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
  b2:	13 be       	out	0x33, r1	; 51
  b4:	08 95       	ret

000000b6 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  b6:	66 23       	and	r22, r22
  b8:	11 f0       	breq	.+4      	; 0xbe <output+0x8>
  ba:	c0 9a       	sbi	0x18, 0	; 24
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <output+0xa>
  be:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
  c0:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN 2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
  c2:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  c8:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  ca:	00 00       	nop
  NOP();
  cc:	00 00       	nop
  NOP();
  ce:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
  d0:	c2 98       	cbi	0x18, 2	; 24
  d2:	08 95       	ret

000000d4 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  d4:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
  d6:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  d8:	11 ba       	out	0x11, r1	; 17
  return PIND;
  da:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  dc:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  de:	00 00       	nop
  NOP();
  e0:	00 00       	nop
  NOP();
  e2:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  e4:	11 ba       	out	0x11, r1	; 17
  return PIND;
  e6:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
  e8:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
  ea:	99 23       	and	r25, r25
  ec:	9c f3       	brlt	.-26     	; 0xd4 <write>
  output(c, rs);
  ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <output>
  f2:	08 95       	ret

000000f4 <lcd_init>:
}

void
lcd_init(void)
{
  SET_BIT(DDR, RS_PIN);
  f4:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
  f6:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
  f8:	ba 9a       	sbi	0x17, 2	; 23
  avr_wait(16);
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
  output(0x30, 0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	0e 94 5b 00 	call	0xb6	; 0xb6 <output>
  avr_wait(5);
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
  output(0x30, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	0e 94 5b 00 	call	0xb6	; 0xb6 <output>
  avr_wait(1);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
  write(0x3c, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8c e3       	ldi	r24, 0x3C	; 60
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
  write(0x0c, 0);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
  write(0x06, 0);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
  write(0x01, 0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 142:	08 95       	ret

00000144 <lcd_clr>:
}

void
lcd_clr(void)
{
  write(0x01, 0);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 14c:	08 95       	ret

0000014e <lcd_pos>:
}

void
lcd_pos(unsigned char r, unsigned char c)
{
 14e:	cf 93       	push	r28
  unsigned char n = r * 40 + c;
 150:	c6 2f       	mov	r28, r22
 152:	98 e2       	ldi	r25, 0x28	; 40
 154:	89 9f       	mul	r24, r25
 156:	c0 0d       	add	r28, r0
 158:	11 24       	eor	r1, r1
  write(0x02, 0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
  while (n--) {
 162:	cc 23       	and	r28, r28
 164:	31 f0       	breq	.+12     	; 0x172 <lcd_pos+0x24>
    write(0x14, 0);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	84 e1       	ldi	r24, 0x14	; 20
 16a:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 16e:	c1 50       	subi	r28, 0x01	; 1
void
lcd_pos(unsigned char r, unsigned char c)
{
  unsigned char n = r * 40 + c;
  write(0x02, 0);
  while (n--) {
 170:	d1 f7       	brne	.-12     	; 0x166 <lcd_pos+0x18>
    write(0x14, 0);
  }
}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_put>:

void
lcd_put(char c)
{
  write(c, 1);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 17c:	08 95       	ret

0000017e <setup>:
	}
}
*/


void play_song(){
 17e:	d0 9a       	sbi	0x1a, 0	; 26
 180:	d8 98       	cbi	0x1b, 0	; 27
 182:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>
 186:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clr>
 18a:	d0 9a       	sbi	0x1a, 0	; 26
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	08 95       	ret

00000192 <play_note>:
 192:	8b 01       	movw	r16, r22
 194:	bc 01       	movw	r22, r24
 196:	99 0f       	add	r25, r25
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	0e 94 b9 01 	call	0x372	; 0x372 <__floatsisf>
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	9f e3       	ldi	r25, 0x3F	; 63
 1ac:	0e 94 0f 01 	call	0x21e	; 0x21e <__divsf3>
 1b0:	6b 01       	movw	r12, r22
 1b2:	7c 01       	movw	r14, r24
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	5f e3       	ldi	r21, 0x3F	; 63
 1bc:	0e 94 45 02 	call	0x48a	; 0x48a <__mulsf3>
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	4a e7       	ldi	r20, 0x7A	; 122
 1c6:	54 e4       	ldi	r21, 0x44	; 68
 1c8:	0e 94 45 02 	call	0x48a	; 0x48a <__mulsf3>
 1cc:	0e 94 81 01 	call	0x302	; 0x302 <__fixsfsi>
 1d0:	eb 01       	movw	r28, r22
 1d2:	b8 01       	movw	r22, r16
 1d4:	11 0f       	add	r17, r17
 1d6:	88 0b       	sbc	r24, r24
 1d8:	99 0b       	sbc	r25, r25
 1da:	0e 94 b9 01 	call	0x372	; 0x372 <__floatsisf>
 1de:	a7 01       	movw	r20, r14
 1e0:	96 01       	movw	r18, r12
 1e2:	0e 94 0f 01 	call	0x21e	; 0x21e <__divsf3>
 1e6:	0e 94 81 01 	call	0x302	; 0x302 <__fixsfsi>
 1ea:	67 2b       	or	r22, r23
 1ec:	39 f4       	brne	.+14     	; 0x1fc <play_note+0x6a>
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_pos>
 1f6:	81 e6       	ldi	r24, 0x61	; 97
 1f8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_put>
 1fc:	d8 9a       	sbi	0x1b, 0	; 27
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
 204:	d8 98       	cbi	0x1b, 0	; 27
 206:	ce 01       	movw	r24, r28
 208:	0e 94 49 00 	call	0x92	; 0x92 <avr_wait>
 20c:	f7 cf       	rjmp	.-18     	; 0x1fc <play_note+0x6a>

0000020e <main>:
{
	//local variables
	int k;
	
	// setting up
	setup();
 20e:	0e 94 bf 00 	call	0x17e	; 0x17e <setup>

	// main logic
    while (1) 
    {	
		play_note(440, 179666875);
 212:	6b eb       	ldi	r22, 0xBB	; 187
 214:	7f e7       	ldi	r23, 0x7F	; 127
 216:	88 eb       	ldi	r24, 0xB8	; 184
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 c9 00 	call	0x192	; 0x192 <play_note>

0000021e <__divsf3>:
 21e:	0e 94 23 01 	call	0x246	; 0x246 <__divsf3x>
 222:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_round>
 226:	0e 94 04 02 	call	0x408	; 0x408 <__fp_pscB>
 22a:	58 f0       	brcs	.+22     	; 0x242 <__divsf3+0x24>
 22c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fp_pscA>
 230:	40 f0       	brcs	.+16     	; 0x242 <__divsf3+0x24>
 232:	29 f4       	brne	.+10     	; 0x23e <__divsf3+0x20>
 234:	5f 3f       	cpi	r21, 0xFF	; 255
 236:	29 f0       	breq	.+10     	; 0x242 <__divsf3+0x24>
 238:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_inf>
 23c:	51 11       	cpse	r21, r1
 23e:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>
 242:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_nan>

00000246 <__divsf3x>:
 246:	0e 94 1c 02 	call	0x438	; 0x438 <__fp_split3>
 24a:	68 f3       	brcs	.-38     	; 0x226 <__divsf3+0x8>

0000024c <__divsf3_pse>:
 24c:	99 23       	and	r25, r25
 24e:	b1 f3       	breq	.-20     	; 0x23c <__divsf3+0x1e>
 250:	55 23       	and	r21, r21
 252:	91 f3       	breq	.-28     	; 0x238 <__divsf3+0x1a>
 254:	95 1b       	sub	r25, r21
 256:	55 0b       	sbc	r21, r21
 258:	bb 27       	eor	r27, r27
 25a:	aa 27       	eor	r26, r26
 25c:	62 17       	cp	r22, r18
 25e:	73 07       	cpc	r23, r19
 260:	84 07       	cpc	r24, r20
 262:	38 f0       	brcs	.+14     	; 0x272 <__divsf3_pse+0x26>
 264:	9f 5f       	subi	r25, 0xFF	; 255
 266:	5f 4f       	sbci	r21, 0xFF	; 255
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	44 1f       	adc	r20, r20
 26e:	aa 1f       	adc	r26, r26
 270:	a9 f3       	breq	.-22     	; 0x25c <__divsf3_pse+0x10>
 272:	35 d0       	rcall	.+106    	; 0x2de <__divsf3_pse+0x92>
 274:	0e 2e       	mov	r0, r30
 276:	3a f0       	brmi	.+14     	; 0x286 <__divsf3_pse+0x3a>
 278:	e0 e8       	ldi	r30, 0x80	; 128
 27a:	32 d0       	rcall	.+100    	; 0x2e0 <__divsf3_pse+0x94>
 27c:	91 50       	subi	r25, 0x01	; 1
 27e:	50 40       	sbci	r21, 0x00	; 0
 280:	e6 95       	lsr	r30
 282:	00 1c       	adc	r0, r0
 284:	ca f7       	brpl	.-14     	; 0x278 <__divsf3_pse+0x2c>
 286:	2b d0       	rcall	.+86     	; 0x2de <__divsf3_pse+0x92>
 288:	fe 2f       	mov	r31, r30
 28a:	29 d0       	rcall	.+82     	; 0x2de <__divsf3_pse+0x92>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	88 1f       	adc	r24, r24
 292:	bb 1f       	adc	r27, r27
 294:	26 17       	cp	r18, r22
 296:	37 07       	cpc	r19, r23
 298:	48 07       	cpc	r20, r24
 29a:	ab 07       	cpc	r26, r27
 29c:	b0 e8       	ldi	r27, 0x80	; 128
 29e:	09 f0       	breq	.+2      	; 0x2a2 <__divsf3_pse+0x56>
 2a0:	bb 0b       	sbc	r27, r27
 2a2:	80 2d       	mov	r24, r0
 2a4:	bf 01       	movw	r22, r30
 2a6:	ff 27       	eor	r31, r31
 2a8:	93 58       	subi	r25, 0x83	; 131
 2aa:	5f 4f       	sbci	r21, 0xFF	; 255
 2ac:	3a f0       	brmi	.+14     	; 0x2bc <__divsf3_pse+0x70>
 2ae:	9e 3f       	cpi	r25, 0xFE	; 254
 2b0:	51 05       	cpc	r21, r1
 2b2:	78 f0       	brcs	.+30     	; 0x2d2 <__divsf3_pse+0x86>
 2b4:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_inf>
 2b8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>
 2bc:	5f 3f       	cpi	r21, 0xFF	; 255
 2be:	e4 f3       	brlt	.-8      	; 0x2b8 <__divsf3_pse+0x6c>
 2c0:	98 3e       	cpi	r25, 0xE8	; 232
 2c2:	d4 f3       	brlt	.-12     	; 0x2b8 <__divsf3_pse+0x6c>
 2c4:	86 95       	lsr	r24
 2c6:	77 95       	ror	r23
 2c8:	67 95       	ror	r22
 2ca:	b7 95       	ror	r27
 2cc:	f7 95       	ror	r31
 2ce:	9f 5f       	subi	r25, 0xFF	; 255
 2d0:	c9 f7       	brne	.-14     	; 0x2c4 <__divsf3_pse+0x78>
 2d2:	88 0f       	add	r24, r24
 2d4:	91 1d       	adc	r25, r1
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	97 f9       	bld	r25, 7
 2dc:	08 95       	ret
 2de:	e1 e0       	ldi	r30, 0x01	; 1
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	88 1f       	adc	r24, r24
 2e6:	bb 1f       	adc	r27, r27
 2e8:	62 17       	cp	r22, r18
 2ea:	73 07       	cpc	r23, r19
 2ec:	84 07       	cpc	r24, r20
 2ee:	ba 07       	cpc	r27, r26
 2f0:	20 f0       	brcs	.+8      	; 0x2fa <__divsf3_pse+0xae>
 2f2:	62 1b       	sub	r22, r18
 2f4:	73 0b       	sbc	r23, r19
 2f6:	84 0b       	sbc	r24, r20
 2f8:	ba 0b       	sbc	r27, r26
 2fa:	ee 1f       	adc	r30, r30
 2fc:	88 f7       	brcc	.-30     	; 0x2e0 <__divsf3_pse+0x94>
 2fe:	e0 95       	com	r30
 300:	08 95       	ret

00000302 <__fixsfsi>:
 302:	0e 94 88 01 	call	0x310	; 0x310 <__fixunssfsi>
 306:	68 94       	set
 308:	b1 11       	cpse	r27, r1
 30a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>
 30e:	08 95       	ret

00000310 <__fixunssfsi>:
 310:	0e 94 24 02 	call	0x448	; 0x448 <__fp_splitA>
 314:	88 f0       	brcs	.+34     	; 0x338 <__fixunssfsi+0x28>
 316:	9f 57       	subi	r25, 0x7F	; 127
 318:	98 f0       	brcs	.+38     	; 0x340 <__fixunssfsi+0x30>
 31a:	b9 2f       	mov	r27, r25
 31c:	99 27       	eor	r25, r25
 31e:	b7 51       	subi	r27, 0x17	; 23
 320:	b0 f0       	brcs	.+44     	; 0x34e <__fixunssfsi+0x3e>
 322:	e1 f0       	breq	.+56     	; 0x35c <__fixunssfsi+0x4c>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	1a f0       	brmi	.+6      	; 0x334 <__fixunssfsi+0x24>
 32e:	ba 95       	dec	r27
 330:	c9 f7       	brne	.-14     	; 0x324 <__fixunssfsi+0x14>
 332:	14 c0       	rjmp	.+40     	; 0x35c <__fixunssfsi+0x4c>
 334:	b1 30       	cpi	r27, 0x01	; 1
 336:	91 f0       	breq	.+36     	; 0x35c <__fixunssfsi+0x4c>
 338:	0e 94 3e 02 	call	0x47c	; 0x47c <__fp_zero>
 33c:	b1 e0       	ldi	r27, 0x01	; 1
 33e:	08 95       	ret
 340:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_zero>
 344:	67 2f       	mov	r22, r23
 346:	78 2f       	mov	r23, r24
 348:	88 27       	eor	r24, r24
 34a:	b8 5f       	subi	r27, 0xF8	; 248
 34c:	39 f0       	breq	.+14     	; 0x35c <__fixunssfsi+0x4c>
 34e:	b9 3f       	cpi	r27, 0xF9	; 249
 350:	cc f3       	brlt	.-14     	; 0x344 <__fixunssfsi+0x34>
 352:	86 95       	lsr	r24
 354:	77 95       	ror	r23
 356:	67 95       	ror	r22
 358:	b3 95       	inc	r27
 35a:	d9 f7       	brne	.-10     	; 0x352 <__fixunssfsi+0x42>
 35c:	3e f4       	brtc	.+14     	; 0x36c <__fixunssfsi+0x5c>
 35e:	90 95       	com	r25
 360:	80 95       	com	r24
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__floatunsisf>:
 36e:	e8 94       	clt
 370:	09 c0       	rjmp	.+18     	; 0x384 <__floatsisf+0x12>

00000372 <__floatsisf>:
 372:	97 fb       	bst	r25, 7
 374:	3e f4       	brtc	.+14     	; 0x384 <__floatsisf+0x12>
 376:	90 95       	com	r25
 378:	80 95       	com	r24
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	99 23       	and	r25, r25
 386:	a9 f0       	breq	.+42     	; 0x3b2 <__floatsisf+0x40>
 388:	f9 2f       	mov	r31, r25
 38a:	96 e9       	ldi	r25, 0x96	; 150
 38c:	bb 27       	eor	r27, r27
 38e:	93 95       	inc	r25
 390:	f6 95       	lsr	r31
 392:	87 95       	ror	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b7 95       	ror	r27
 39a:	f1 11       	cpse	r31, r1
 39c:	f8 cf       	rjmp	.-16     	; 0x38e <__floatsisf+0x1c>
 39e:	fa f4       	brpl	.+62     	; 0x3de <__floatsisf+0x6c>
 3a0:	bb 0f       	add	r27, r27
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__floatsisf+0x36>
 3a4:	60 ff       	sbrs	r22, 0
 3a6:	1b c0       	rjmp	.+54     	; 0x3de <__floatsisf+0x6c>
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	16 c0       	rjmp	.+44     	; 0x3de <__floatsisf+0x6c>
 3b2:	88 23       	and	r24, r24
 3b4:	11 f0       	breq	.+4      	; 0x3ba <__floatsisf+0x48>
 3b6:	96 e9       	ldi	r25, 0x96	; 150
 3b8:	11 c0       	rjmp	.+34     	; 0x3dc <__floatsisf+0x6a>
 3ba:	77 23       	and	r23, r23
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <__floatsisf+0x54>
 3be:	9e e8       	ldi	r25, 0x8E	; 142
 3c0:	87 2f       	mov	r24, r23
 3c2:	76 2f       	mov	r23, r22
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <__floatsisf+0x5e>
 3c6:	66 23       	and	r22, r22
 3c8:	71 f0       	breq	.+28     	; 0x3e6 <__floatsisf+0x74>
 3ca:	96 e8       	ldi	r25, 0x86	; 134
 3cc:	86 2f       	mov	r24, r22
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	2a f0       	brmi	.+10     	; 0x3de <__floatsisf+0x6c>
 3d4:	9a 95       	dec	r25
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	da f7       	brpl	.-10     	; 0x3d4 <__floatsisf+0x62>
 3de:	88 0f       	add	r24, r24
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <__fp_inf>:
 3e8:	97 f9       	bld	r25, 7
 3ea:	9f 67       	ori	r25, 0x7F	; 127
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <__fp_nan>:
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	80 ec       	ldi	r24, 0xC0	; 192
 3f8:	08 95       	ret

000003fa <__fp_pscA>:
 3fa:	00 24       	eor	r0, r0
 3fc:	0a 94       	dec	r0
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	18 06       	cpc	r1, r24
 404:	09 06       	cpc	r0, r25
 406:	08 95       	ret

00000408 <__fp_pscB>:
 408:	00 24       	eor	r0, r0
 40a:	0a 94       	dec	r0
 40c:	12 16       	cp	r1, r18
 40e:	13 06       	cpc	r1, r19
 410:	14 06       	cpc	r1, r20
 412:	05 06       	cpc	r0, r21
 414:	08 95       	ret

00000416 <__fp_round>:
 416:	09 2e       	mov	r0, r25
 418:	03 94       	inc	r0
 41a:	00 0c       	add	r0, r0
 41c:	11 f4       	brne	.+4      	; 0x422 <__fp_round+0xc>
 41e:	88 23       	and	r24, r24
 420:	52 f0       	brmi	.+20     	; 0x436 <__fp_round+0x20>
 422:	bb 0f       	add	r27, r27
 424:	40 f4       	brcc	.+16     	; 0x436 <__fp_round+0x20>
 426:	bf 2b       	or	r27, r31
 428:	11 f4       	brne	.+4      	; 0x42e <__fp_round+0x18>
 42a:	60 ff       	sbrs	r22, 0
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__fp_round+0x20>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__fp_split3>:
 438:	57 fd       	sbrc	r21, 7
 43a:	90 58       	subi	r25, 0x80	; 128
 43c:	44 0f       	add	r20, r20
 43e:	55 1f       	adc	r21, r21
 440:	59 f0       	breq	.+22     	; 0x458 <__fp_splitA+0x10>
 442:	5f 3f       	cpi	r21, 0xFF	; 255
 444:	71 f0       	breq	.+28     	; 0x462 <__fp_splitA+0x1a>
 446:	47 95       	ror	r20

00000448 <__fp_splitA>:
 448:	88 0f       	add	r24, r24
 44a:	97 fb       	bst	r25, 7
 44c:	99 1f       	adc	r25, r25
 44e:	61 f0       	breq	.+24     	; 0x468 <__fp_splitA+0x20>
 450:	9f 3f       	cpi	r25, 0xFF	; 255
 452:	79 f0       	breq	.+30     	; 0x472 <__fp_splitA+0x2a>
 454:	87 95       	ror	r24
 456:	08 95       	ret
 458:	12 16       	cp	r1, r18
 45a:	13 06       	cpc	r1, r19
 45c:	14 06       	cpc	r1, r20
 45e:	55 1f       	adc	r21, r21
 460:	f2 cf       	rjmp	.-28     	; 0x446 <__fp_split3+0xe>
 462:	46 95       	lsr	r20
 464:	f1 df       	rcall	.-30     	; 0x448 <__fp_splitA>
 466:	08 c0       	rjmp	.+16     	; 0x478 <__fp_splitA+0x30>
 468:	16 16       	cp	r1, r22
 46a:	17 06       	cpc	r1, r23
 46c:	18 06       	cpc	r1, r24
 46e:	99 1f       	adc	r25, r25
 470:	f1 cf       	rjmp	.-30     	; 0x454 <__fp_splitA+0xc>
 472:	86 95       	lsr	r24
 474:	71 05       	cpc	r23, r1
 476:	61 05       	cpc	r22, r1
 478:	08 94       	sec
 47a:	08 95       	ret

0000047c <__fp_zero>:
 47c:	e8 94       	clt

0000047e <__fp_szero>:
 47e:	bb 27       	eor	r27, r27
 480:	66 27       	eor	r22, r22
 482:	77 27       	eor	r23, r23
 484:	cb 01       	movw	r24, r22
 486:	97 f9       	bld	r25, 7
 488:	08 95       	ret

0000048a <__mulsf3>:
 48a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__mulsf3x>
 48e:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_round>
 492:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fp_pscA>
 496:	38 f0       	brcs	.+14     	; 0x4a6 <__mulsf3+0x1c>
 498:	0e 94 04 02 	call	0x408	; 0x408 <__fp_pscB>
 49c:	20 f0       	brcs	.+8      	; 0x4a6 <__mulsf3+0x1c>
 49e:	95 23       	and	r25, r21
 4a0:	11 f0       	breq	.+4      	; 0x4a6 <__mulsf3+0x1c>
 4a2:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_inf>
 4a6:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__fp_nan>
 4aa:	11 24       	eor	r1, r1
 4ac:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>

000004b0 <__mulsf3x>:
 4b0:	0e 94 1c 02 	call	0x438	; 0x438 <__fp_split3>
 4b4:	70 f3       	brcs	.-36     	; 0x492 <__mulsf3+0x8>

000004b6 <__mulsf3_pse>:
 4b6:	95 9f       	mul	r25, r21
 4b8:	c1 f3       	breq	.-16     	; 0x4aa <__mulsf3+0x20>
 4ba:	95 0f       	add	r25, r21
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	55 1f       	adc	r21, r21
 4c0:	62 9f       	mul	r22, r18
 4c2:	f0 01       	movw	r30, r0
 4c4:	72 9f       	mul	r23, r18
 4c6:	bb 27       	eor	r27, r27
 4c8:	f0 0d       	add	r31, r0
 4ca:	b1 1d       	adc	r27, r1
 4cc:	63 9f       	mul	r22, r19
 4ce:	aa 27       	eor	r26, r26
 4d0:	f0 0d       	add	r31, r0
 4d2:	b1 1d       	adc	r27, r1
 4d4:	aa 1f       	adc	r26, r26
 4d6:	64 9f       	mul	r22, r20
 4d8:	66 27       	eor	r22, r22
 4da:	b0 0d       	add	r27, r0
 4dc:	a1 1d       	adc	r26, r1
 4de:	66 1f       	adc	r22, r22
 4e0:	82 9f       	mul	r24, r18
 4e2:	22 27       	eor	r18, r18
 4e4:	b0 0d       	add	r27, r0
 4e6:	a1 1d       	adc	r26, r1
 4e8:	62 1f       	adc	r22, r18
 4ea:	73 9f       	mul	r23, r19
 4ec:	b0 0d       	add	r27, r0
 4ee:	a1 1d       	adc	r26, r1
 4f0:	62 1f       	adc	r22, r18
 4f2:	83 9f       	mul	r24, r19
 4f4:	a0 0d       	add	r26, r0
 4f6:	61 1d       	adc	r22, r1
 4f8:	22 1f       	adc	r18, r18
 4fa:	74 9f       	mul	r23, r20
 4fc:	33 27       	eor	r19, r19
 4fe:	a0 0d       	add	r26, r0
 500:	61 1d       	adc	r22, r1
 502:	23 1f       	adc	r18, r19
 504:	84 9f       	mul	r24, r20
 506:	60 0d       	add	r22, r0
 508:	21 1d       	adc	r18, r1
 50a:	82 2f       	mov	r24, r18
 50c:	76 2f       	mov	r23, r22
 50e:	6a 2f       	mov	r22, r26
 510:	11 24       	eor	r1, r1
 512:	9f 57       	subi	r25, 0x7F	; 127
 514:	50 40       	sbci	r21, 0x00	; 0
 516:	9a f0       	brmi	.+38     	; 0x53e <__mulsf3_pse+0x88>
 518:	f1 f0       	breq	.+60     	; 0x556 <__mulsf3_pse+0xa0>
 51a:	88 23       	and	r24, r24
 51c:	4a f0       	brmi	.+18     	; 0x530 <__mulsf3_pse+0x7a>
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	bb 1f       	adc	r27, r27
 524:	66 1f       	adc	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	88 1f       	adc	r24, r24
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	50 40       	sbci	r21, 0x00	; 0
 52e:	a9 f7       	brne	.-22     	; 0x51a <__mulsf3_pse+0x64>
 530:	9e 3f       	cpi	r25, 0xFE	; 254
 532:	51 05       	cpc	r21, r1
 534:	80 f0       	brcs	.+32     	; 0x556 <__mulsf3_pse+0xa0>
 536:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_inf>
 53a:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__fp_szero>
 53e:	5f 3f       	cpi	r21, 0xFF	; 255
 540:	e4 f3       	brlt	.-8      	; 0x53a <__mulsf3_pse+0x84>
 542:	98 3e       	cpi	r25, 0xE8	; 232
 544:	d4 f3       	brlt	.-12     	; 0x53a <__mulsf3_pse+0x84>
 546:	86 95       	lsr	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b7 95       	ror	r27
 54e:	f7 95       	ror	r31
 550:	e7 95       	ror	r30
 552:	9f 5f       	subi	r25, 0xFF	; 255
 554:	c1 f7       	brne	.-16     	; 0x546 <__mulsf3_pse+0x90>
 556:	fe 2b       	or	r31, r30
 558:	88 0f       	add	r24, r24
 55a:	91 1d       	adc	r25, r1
 55c:	96 95       	lsr	r25
 55e:	87 95       	ror	r24
 560:	97 f9       	bld	r25, 7
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
